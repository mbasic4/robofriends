{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","Card.js","CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","constants.js","components/Header.js","App.js","actions.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Card","robot","className","alt","src","id","width","height","name","email","CardList","robots","map","Scroll","props","style","overflowY","border","children","SearchBox","searchField","onSearchChange","type","placeholder","value","onChange","ErrorBoundary","hasError","info","this","setState","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","nextProps","nextState","App","onRequestRobots","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","e","text","target","payload","fetch","response","json","data","err","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f7d3c1ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nexport const Card = ({ robot }) => {\r\n  return (\r\n    <div className='w-20 bg-washed-yellow tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img\r\n        alt='robot'\r\n        src={`https://robohash.org/${robot.id}?size=200x200`}\r\n        width={200}\r\n        height={200}\r\n      />\r\n      <div>\r\n        <h2>{robot.name}</h2>\r\n        <p>{robot.email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Card } from './Card'\r\n\r\nexport const CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map(robot => <Card key={robot.id} robot={robot} />)}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: 540 }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\n\r\nexport const SearchBox = ({ searchField, onSearchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='search-robots'\r\n        className='pa3 ba b--green bg-washed-yellow'\r\n        type='search'\r\n        placeholder='Search robots...'\r\n        value={searchField}\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooooops. There is an error</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from 'react'\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <h1 className='f2'>RoboFriends</h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { CardList } from './CardList'\nimport Scroll from './components/Scroll'\nimport { SearchBox } from './components/SearchBox'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport { requestRobots, setSearchField } from './actions'\nimport Header from './components/Header'\n\nconst mapStateToProps = state => {\n  console.log(state)\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    if (isPending) return <h1 className='tc'>Loading...</h1>\n    return ( \n      <div className='tc'>\n        <Header />\n        <SearchBox\n          searchField={searchField}\n          onSearchChange={onSearchChange}\n        />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  console.log('evo me u dispachu')\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n}","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return { ...state, searchField: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true }\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false }\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false }\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport 'tachyons'\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}